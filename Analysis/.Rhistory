axis.ticks = element_blank(),
legend.title=element_text(hjust = 0.5))
ggplot(data)+
geom_tile(aes(x=pressure, y=response, fill=value),
color="grey")+
scale_fill_gradient(name="studies",low = "white", high = "grey25", breaks=c(1,3,5))+
scale_y_discrete(limits=rev)+
scale_x_discrete(position = "top") +
guides(fill = guide_colorsteps(title.position = "top"))+
# coord_fixed()+
theme_minimal()+
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 90, hjust=0, vjust=0.5),
legend.position = "bottom",
axis.ticks = element_blank(),
legend.title=element_text(hjust = 0.5))
ggplot(data)+
geom_tile(aes(x=pressure, y=response, fill=value),
color="grey")+
scale_fill_gradient(name="studies",low = "white", high = "grey25", breaks=c(1,3,5))+
scale_y_discrete(limits=rev)+
scale_x_discrete(position = "top") +
guides(fill = guide_colorsteps(title.position = "top"))+
# coord_fixed()+
theme_minimal()+
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 90, hjust=0, vjust=0.3),
legend.position = "bottom",
axis.ticks = element_blank(),
legend.title=element_text(hjust = 0.5))
?runif
P = runif(1000,0.1, 3)
Hp = runif(1000, 0.01, 1)
R = P/Hp
Rlog = log(P/Hp)
plot(R~Rlog)
plot(Rlog~Hp)
plot(Hp~Rlog)
require(terra)
require(tidyverse)
require(GGally)
require(readxl)
#AES Roads and Rail density and crossing
AES_road = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx", sheet ="ES_MainStats")
#LGL Roads and Rail density and crossing
LGL_road = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx", sheet ="LGL_MainStats")
#AES Roads and Rail density and crossing
AES_road = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx", sheet ="ES_MainStats")
#LGL Roads and Rail density and crossing
LGL_road = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx", sheet ="LGL_MainStats")
newtheme <- theme_classic()+
theme(axis.title = element_blank(), axis.line  = element_line(color="black"),
axis.ticks = element_line(color="black"), axis.text = element_text(face="bold"),
axis.line.y = element_blank(),
axis.ticks.y =element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "white", colour = "black") )
AES_roads
require(terra)
require(tidyverse)
require(GGally)
require(readxl)
#LGL Roads and Rail density and crossing
LGL_road = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx", sheet ="LGL_MainStats")
#AES Roads and Rail density and crossing
AES_road = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx", sheet ="ES_MainStats")
newtheme <- theme_classic()+
theme(axis.title = element_blank(), axis.line  = element_line(color="black"),
axis.ticks = element_line(color="black"), axis.text = element_text(face="bold"),
axis.line.y = element_blank(),
axis.ticks.y =element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "white", colour = "black") )
AES_roads
AES_road
AES_road$ALL_CROSSINGS
AES_road = AES_road %>% mutate(crossing_dens = ALL_CROSSINGS/STREAMS_KM)
ggplot(AES_road)+
geom_histogram(aes(x=crossing_dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
AES_road = AES_road %>% mutate(crossing_dens = (ALL_CROSSINGS*10)/STREAMS_KM)
ggplot(AES_road)+
geom_histogram(aes(x=crossing_dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
ggplot(LGL_road)+
geom_histogram(aes(x=crossing_dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
LGL_road = LGL_road %>% mutate(crossing_dens = (ALL_CROSSINGS*10)/STREAMS_KM)
ggplot(LGL_road)+
geom_histogram(aes(x=crossing_dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
LGL_road$ALL_CROSSINGS
LGL_road$STREAMS_KM
range(AES_road$crossing_dens)
median(AES_road$crossing_dens)
range(LGL_road$crossing_dens)
range(LGL_road$crossing_dens, na.rm = T)
median(AES_road$crossing_dens, na.rm = T)
median(LGL_road$crossing_dens, na.rm = T)
quantile(LGL_road$crossing_dens, na.rm = T)
range(AES_road$crossing_dens)
median(AES_road$crossing_dens)
quantile(AES_road$crossing_dens)
#FFHPP Land use summaries
LGLlanduse = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\LandUseSummaries_SOF.xlsx", sheet ="LGL Sentinel 2021" )
#FFHPP Land use summaries
ESlanduse = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\LandUseSummaries_SOF.xlsx", sheet ="ES Sentinel 2021" )
#LGL land use summary update for two AUs
LGL_LU_update = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\LGL_LandUseUpdates.xlsx", sheet ="Sheet1" )
######LGL Riparian Buffer
names(LGLlanduse)[3:6]<-c("WatershedArea_m2", "BufferArea_m2","WatershedArea_km2","BufferArea_km2")
LGLlanduse = LGLlanduse %>% select(UNIQUE_UNIT, TYPE, BufferArea_km2)
LGLlanduse = LGLlanduse %>% filter(!UNIQUE_UNIT %in% c("029C-02", "LO12"))
LGL_LU_update = LGL_LU_update %>% select(UNIQUE_UNIT, TYPE, "Buffer (sqkm)")
names(LGL_LU_update)<-names(LGLlanduse)
LGLlanduse <- bind_rows(LGLlanduse, LGL_LU_update)
LGLlanduse = LGLlanduse %>% filter(TYPE!="Clouds") %>% filter(TYPE!="Water") %>%
mutate(disturbed = ifelse(TYPE %in% c("Built Area", "Crops"), "Yes", "No"))
tmp = LGLlanduse %>% group_by(UNIQUE_UNIT) %>% summarize(total_buffer = sum(BufferArea_km2, na.rm = T)) %>% arrange(UNIQUE_UNIT)
tmp2 = LGLlanduse %>% arrange(UNIQUE_UNIT) %>% group_by(UNIQUE_UNIT) %>%
summarize(total_disturbed = sum(BufferArea_km2[disturbed =="Yes"]),
total_undisturbed= sum(BufferArea_km2[disturbed == "No"]))
tmp3 = left_join(tmp,tmp2, by="UNIQUE_UNIT") %>%
mutate(prop_buffer_disturbed = total_disturbed/total_buffer,
prop_buffer_natural = total_undisturbed/total_buffer)
ggplot(tmp3)+
geom_histogram(aes(x=as.numeric(prop_buffer_natural)*100), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
ggplot(tmp3)+
geom_histogram(aes(x=prop_buffer_natural*100), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
range(tmp3$prop_buffer_natural)
quantile(tmp3$prop_buffer_natural)
?quantile
length(which(tmp3$prop_buffer_natural>0.75))/195
length(which(tmp3$prop_buffer_natural<0.25))/195
######AES Riparian Buffer
names(ESlanduse)[3:6]<-c("WatershedArea_m2", "BufferArea_m2","WatershedArea_km2","BufferArea_km2")
ESlanduse = ESlanduse %>% select(HUC_8, TYPE, BufferArea_km2)
ESlanduse = ESlanduse %>% filter(TYPE!="Clouds") %>% filter(TYPE!="Water") %>%
mutate(disturbed = ifelse(TYPE %in% c("Built Area", "Crops"), "Yes", "No"))
etmp = ESlanduse %>% group_by(HUC_8) %>%
summarize(total_buffer = sum(BufferArea_km2, na.rm = T)) %>%
arrange(HUC_8)
etmp2 = ESlanduse %>% arrange(HUC_8) %>% group_by(HUC_8) %>%
summarize(total_disturbed = sum(BufferArea_km2[disturbed =="Yes"]),
total_undisturbed= sum(BufferArea_km2[disturbed == "No"]))
etmp3 = left_join(etmp,etmp2, by="HUC_8") %>%
mutate(prop_buffer_disturbed = total_disturbed/total_buffer,
prop_buffer_natural = total_undisturbed/total_buffer)
range(etmp3$prop_buffer_natural)
quantile(etmp3$prop_buffer_natural)
length(which(etmp3$prop_buffer_natural>0.75))/195
length(which(etmp3$prop_buffer_natural>0.75))/107
#QWS summary data for LGL
LGL_AU = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx",
sheet ="LGL_MainStats" )
require(tidyverse)
require(readxl)
require(scales)
#QWS summary data for LGL
LGL_AU = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx",
sheet ="LGL_MainStats" )
#HUC8 summary data for AES
AES_AU = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx",
sheet ="ES_MainStats" )
#LGL_Biodiversity and PAs
LGL_Biod_PA = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="LGLA_AUmetrics" )
#LGL temp data
LGL_temp = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="LGLA_Tempsitedata" )
#AES Biodiversity and PAs
AES_Biod_PA = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="AESA_HUCmetrics" )
#AES barrier data CABD
AES_CABD = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="AESA_damwffwaydata" )
#LGL Rip Buffer
LGL_Rip = read_csv(file="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\LGL_Proportion_riparian_buffer_disturbed.csv")
#AES Rip Buffer
AES_Rip = read_csv(file="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\ES_Proportion_riparian_buffer_disturbed.csv")
#LGL EPT
LGL_EPT = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\EPT.xlsx",
sheet = "LGL_ept")
#AES EPT
AES_EPT = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\EPT.xlsx",
sheet = "ES_ept")
#LGL SAR old
LGL_SAR = read_csv(file="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Older versions of datasets\\LGL_Biodiversity.csv")
newtheme <- theme_classic()+
theme(axis.title = element_blank(), axis.line  = element_line(color="black"),
axis.ticks = element_line(color="black"), axis.text = element_text(face="bold"),
axis.line.y = element_blank(),
axis.ticks.y =element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "white", colour = "black") )
######LGL Fish Richness
ggplot(LGL_Biod_PA)+
geom_histogram(aes(x=Fishspprichness), bins=20, fill="grey30")+
newtheme
ggsave("LGL_FishRichness_histogram.png",
path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Histograms",
device="png", width=1.5, height=0.75)
######LGL SAR Richness
ggplot(LGL_SAR)+
geom_histogram(aes(x=DIST_Total), bins=20, fill="grey30")+
newtheme
ggsave("LGL_SARARichness_histogram.png",
path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Histograms",
device="png", width=1.5, height=0.75)
quantile(LGL_SAR$DIST_Total)
quantile(LGL_SAR$DIST_Total, na/rm = F)
quantile(LGL_SAR$DIST_Total, na.rm = F)
quantile(LGL_SAR$DIST_Total, na.rm = FALSE)
quantile(LGL_SAR$DIST_Total, na.rm = TRUE)
quantile(LGL_Biod_PA$Invasive, na.rm = TRUE)
######LGL EPT
names(LGL_EPT)[2]<-"pEPT"
quantile(LGL_EPT$pEPT, na.rm = TRUE)
quantile(AES_Biod_PA$SppRichness, na.rm = TRUE)
quantile(AES_Biod_PA$SARA, na.rm = TRUE)
quantile(AES_Biod_PA$Invasive, na.rm = TRUE)
######AES EPT
names(AES_EPT)[2]<-"pEPT"
quantile(AES_EPT$pEPT, na.rm = TRUE)
source('C:/Users/DeyC/Desktop/Cody Work/GLLFAS Round 2/Projects/SoFFH/Res Doc 2 - SOFFH metrics/SOFFH_Data/SOFFH_histograms_v4.R', echo=TRUE)
#AES Temp data
AES_temp = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\ES_JAmeanwatertempupdate.xls",
sheet ="Sheet1" )
names(AES_temp)
ggplot(AES_temp)+
geom_histogram(aes(x=AvgOfAvgOfWatertemp), bins=20, fill="grey30")+
newtheme
ggplot(AES_temp)+
geom_histogram(aes(x=AvgOfAvgOfWatertemp), bins=15, fill="grey30")+
newtheme
ggsave("AES_JAAvgTemp_histogram.png",
path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Histograms",
device="png", width=1.5, height=0.75)
quantile(AES_temp$AvgOfAvgOfWatertemp)
######LGL Water Temp
LGL_temp = LGL_temp %>% filter(Longitude_DD >-100) ##removes 4 records
quantile(LGL_temp$JAAvgTemp)
###LGL Stream Crossings
LGL_AU = LGL_AU %>% mutate(Cross_Dens = ALL_CROSSINGS/STREAMS_KM)
quantile(LGL_AU$Cross_Dens)
quantile(LGL_AU$Cross_Dens, na.rm = T)
###LGL Stream Crossings
LGL_AU = LGL_AU %>% mutate(Cross_Dens = 10*ALL_CROSSINGS/STREAMS_KM)
ggplot(LGL_AU)+
geom_histogram(aes(x=Cross_Dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
quantile(LGL_AU$Cross_Dens, na.rm = T)
###AES Stream Crossings
AES_AU = AES_AU %>% mutate(Cross_Dens = 10*ALL_CROSSINGS/STREAMS_KM)
quantile(AES_AU$Cross_Dens, na.rm = T)
#AES CABD metrics
AES_CABD = AES_CABD %>% select(starts_with("Num"), "HUC8")
AES_CABD$HUC8 <- as.character(as.numeric(AES_CABD$HUC8))
AES_AU$HUC_8 <- as.character(AES_AU$HUC_8)
AES_CABD = left_join(AES_CABD, AES_AU, by =c("HUC8" = "HUC_8"))
AES_CABD = AES_CABD %>% mutate(waterfall_dens = NumWaterfalls*10/STREAMS_KM)
quantile(AES_CABD$waterfall_dens, na.rm = T)
AES_CABD = AES_CABD %>% mutate(dam_dens = NumDams*10/STREAMS_KM)
quantile(AES_CABD$dam_dens, na.rm = T)
AES_CABD = AES_CABD %>% mutate(fish_dens = NumFishways/STREAMS_KM)
AES_CABD = AES_CABD %>% mutate(fish_dens = NumFishways*10/STREAMS_KM)
quantile(AES_CABD$fish_dens, na.rm = T)
LGL_AU$ROADS_KM[is.na(LGL_AU$ROADS_KM)]<-0
LGL_AU = LGL_AU %>% mutate(road_dens = ROADS_KM/WATERSHED_AREA_KM2)
quantile(LGL_AU$road_dens, na.rm = T)
quantile(LGL_Rip$prop_buffer_disturbed, na.rm = T)
quantile(LGL_Biod_PA$PropPA_LGLA, na.rm = T)
quantile(LGL_Biod_PA$PropPA_LGLA*100, na.rm = T)
quantile(AES_Rip$prop_buffer_disturbed*100, na.rm = T)
AES_AU$ROADS_KM[is.na(AES_AU$ROADS_KM)]<-0
AES_AU = AES_AU %>% mutate(road_dens = ROADS_KM/WATERSHED_AREA_KM2)
quantile(AES_AU$road_dens, na.rm = T)
require(tidyverse)
require(readxl)
require(scales)
#QWS summary data for LGL
LGL_AU = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx",
sheet ="LGL_MainStats" )
#HUC8 summary data for AES
AES_AU = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\CSAS_Update_20220922.xlsx",
sheet ="ES_MainStats" )
#LGL_Biodiversity and PAs
LGL_Biod_PA = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="LGLA_AUmetrics" )
#AES Biodiversity and PAs
AES_Biod_PA = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="AESA_HUCmetrics" )
#LGL temp data
LGL_temp = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="LGLA_Tempsitedata" )
#AES Temp data
AES_temp = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\ES_JAmeanwatertempupdate.xls",
sheet ="Sheet1" )
#AES barrier data CABD
AES_CABD = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Summaryofupdatestometrics_Sep182022.xlsx",
sheet ="AESA_damwffwaydata" )
#LGL Rip Buffer
LGL_Rip = read_csv(file="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\LGL_Proportion_riparian_buffer_disturbed.csv")
#AES Rip Buffer
AES_Rip = read_csv(file="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\ES_Proportion_riparian_buffer_disturbed.csv")
#LGL EPT
LGL_EPT = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\EPT.xlsx",
sheet = "LGL_ept")
#AES EPT
AES_EPT = read_excel(path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\EPT.xlsx",
sheet = "ES_ept")
#LGL SAR old
LGL_SAR = read_csv(file="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Older versions of datasets\\LGL_Biodiversity.csv")
newtheme <- theme_classic()+
theme(axis.title = element_blank(), axis.line  = element_line(color="black"),
axis.ticks = element_line(color="black"), axis.text = element_text(face="bold"),
axis.line.y = element_blank(),
axis.ticks.y =element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "white", colour = "black") )
###LGL Stream Crossings
LGL_AU = LGL_AU %>% mutate(Cross_Dens = 10*ALL_CROSSINGS/STREAMS_KM)
ggplot(LGL_AU)+
geom_histogram(aes(x=Cross_Dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
ggsave("LGL_stream_crossings_histogram.png",
path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Histograms",
device="png", width=1.5, height=0.75)
###AES Stream Crossings
AES_AU = AES_AU %>% mutate(Cross_Dens = 10*ALL_CROSSINGS/STREAMS_KM)
ggplot(AES_AU)+
geom_histogram(aes(x=Cross_Dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
ggsave("AES_stream_crossings_histogram.png",
path="C:\\Users\\DeyC\\Desktop\\Cody Work\\GLLFAS Round 2\\Projects\\SoFFH\\Res Doc 2 - SOFFH metrics\\SOFFH_Data\\Histograms",
device="png", width=1.5, height=0.75)
AES_AU$ROADS_KM[is.na(AES_AU$ROADS_KM)]<-0
AES_AU = AES_AU %>% mutate(road_dens = ROADS_KM/WATERSHED_AREA_KM2)
ggplot(AES_AU)+
geom_histogram(aes(x=road_dens), bins=20, fill="grey30")+
ylab("assessment units")+
newtheme
length(which(AES_AU$road_dens == 0))/107
sort(AES_AU$road_dens)
sessionInfo()
install.packages("tidyverse")
#load data
######################
weights = read_csv("Co_author_weightings.csv")
require(tidyverse)
require(viridis)
require(ggmap)
require(ggspatial)
require(sf)
require(GGally)
require(ggbeeswarm)
require(ggpubr)
#load data
######################
weights = read_csv("Co_author_weightings.csv")
setwd("C:/Users/DeyC/Desktop/Cody Work/GLLFAS Round 2/Projects/KBA - Watershed prioritization/Analysis")
#load data
######################
weights = read_csv("Co_author_weightings.csv")
#
# data5 = read_csv("watershed_prioritization_level5.csv")
# map5 = read_sf("Hybas5_map/hyC_5_join_shp_Lamb_up.shp")
# map5 = left_join(map5, data5, by="HYBAS_ID")
# data6 = read_csv("watershed_prioritization_level6.csv")
# map6 = read_sf("Hydrobasin Level 6/hyC_6_join_shp_Lamb_up.shp")
# map6 = left_join(map6, data6, by="HYBAS_ID")
# map6 = map6 %>% filter(HYBAS_ID %in% data6$HYBAS_ID)
feow = read_sf("FEOW_CAN_Extent/FEOW__CAN_Extent.shp")
###########
#Identify which hy5 each hy6 belongs to
##############
# max_overlap = c()
# for(i in 1:nrow(map6)){
#   sub6 = map6[i,]
#   intersects <- which(st_intersects(sub6, map5, sparse = FALSE))
#   overlaps <- st_intersection(sub6, map5[intersects,])
#   area = st_area(overlaps)
#   max_overlap[i]<-map5$HYBAS_ID[intersects[which.max(area)]]
#   print(i)
# }
#
# map6$corresponding.HYBAS5<-max_overlap
#st_write(map6, "map6.gpkg")
map6<-read_sf("map6.gpkg")
# st_write(map5, "map5.gpkg")
map5<-read_sf("map5.gpkg")
############
#Scale ranks within FEOW to number of FEOW
###########
#
maxrank = max(map6$Prot_rank_feow-1)
map6 = map6 %>%  group_by(FEOW_ID) %>%
mutate(Prot_rank_feow_scaled = ( (Prot_rank_feow-1)* maxrank/max(Prot_rank_feow-1) )+1)
maxrank = max(map6$Rest_rank_feow-1)
map6 = map6 %>%  group_by(FEOW_ID) %>%
mutate(Rest_rank_feow_scaled = ( (Rest_rank_feow-1)* maxrank/max(Rest_rank_feow-1) )+1)
maxrank = max(map6$SAR_rank_feow-1)
map6 = map6 %>%  group_by(FEOW_ID) %>%
mutate(SAR_rank_feow_scaled = ( (SAR_rank_feow-1)* maxrank/max(SAR_rank_feow-1) ) +1 )
maxrank = max(map6$AIS_rank_feow-1)
map6 = map6 %>%  group_by(FEOW_ID) %>%
mutate(AIS_rank_feow_scaled = ( (AIS_rank_feow-1)* maxrank/max(AIS_rank_feow-1) ) +1 )
############
d5 = map5 %>% st_drop_geometry()
map6 = map6 %>% mutate(
protection_score5 = d5$protection_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
restoration_score5 = d5$restoration_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
SAR_score5 = d5$SAR_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
AIS_score5 = d5$AIS_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
)
#Investigating scale
#######
d5 = map5 %>% st_drop_geometry()
map6 = map6 %>% mutate(
protection_score5 = d5$protection_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
restoration_score5 = d5$restoration_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
SAR_score5 = d5$SAR_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
AIS_score5 = d5$AIS_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
)
colnames(d5)
d5$protection_score
d5$HYBAS_ID
#Investigating scale
#######
d5 = map5 %>% st_drop_geometry() %>%ungroup()
map6 = map6 %>% mutate(
protection_score5 = d5$protection_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
restoration_score5 = d5$restoration_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
SAR_score5 = d5$SAR_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
AIS_score5 = d5$AIS_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
)
colnames(map6)
match(map6$corresponding.HYBAS5, d5$HYBAS_ID)
d5$protection_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)]
#Investigating scale
#######
d5 = map5 %>% st_drop_geometry() %>%ungroup()
map6 = map6 %>% mutate(
protection_score5 = d5$protection_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
restoration_score5 = d5$restoration_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
SAR_score5 = d5$SAR_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
AIS_score5 = d5$AIS_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
)
map6 = map6 %>% ungroup() %>% mutate(
protection_score5 = d5$protection_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
restoration_score5 = d5$restoration_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
SAR_score5 = d5$SAR_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
AIS_score5 = d5$AIS_score[match(map6$corresponding.HYBAS5, d5$HYBAS_ID)],
)
obj=c("protection", "restoration", "SAR", "AIS")
threshold = seq(0.05,0.5,0.01)
df = tibble(objective = c(), threshold = c(), ratio=c())
for(i in 1:length(obj)){
for(j in 1:length(threshold)){
var = paste0(obj[i],"_score")
tmp = map6 %>% ungroup() %>%
group_by(FEOW_ID) %>%
arrange(FEOW_ID, desc(!!var)) %>%
relocate(!!var, .after = last_col()) %>%
top_frac(n = threshold[j])
map6$level6 = ifelse(map6$HYBAS_ID %in% tmp$HYBAS_ID, 1, 0)
var2 = paste0(obj[i],"_score5")
tmp = map6 %>% ungroup() %>%
group_by(FEOW_ID) %>%
arrange(FEOW_ID, desc(!!var2)) %>%
relocate(!!var2, .after = last_col()) %>%
top_frac(n = threshold[j])
map6$level5 = ifelse(map6$HYBAS_ID %in% tmp$HYBAS_ID, 1, 0)
ratio = length(which(map6$level6 == 1 & map6$level5 == 0)) / length(which(map6$level6 == 1))
to_add = tibble(objective = obj[i], threshold = threshold[j], ratio=ratio)
df = bind_rows(df, to_add)
}
}
mylabels = df %>% filter(threshold == 0.5)
mylabels$ratio[which(mylabels$objective == "SAR")]<-0.24 #nudge
df
df %>% filter(threshold == 0.1)
map6$SARI_n
##Priorities within ecoregions
###############
data = map6
map6 %>% st_drop_geometry %>% ungroup() %>% group_by(FEOW_ID) %>% summarise(SAR_p = max(SARI_n))
map6 %>% st_drop_geometry %>% ungroup() %>% group_by(FEOW_ID) %>% summarise(SAR_p = max(SARI_n)) %>% print(n=Inf)
colnames(map6)
#two ecoregions with no SAR (111, 112)
map6 %>% st_drop_geometry %>% ungroup() %>% group_by(FEOW_ID) %>% summarise(SAR_p = max(FBCI_n)) %>% print(n=Inf)
sessionInfo()
citation()
citation(package="sf")
citation(package="shiny")
citation(package="leaflet")
citation(package="tidyverse")
